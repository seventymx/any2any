// <auto-generated />
using System;
using Any2Any.Prototype;
using Any2Any.Prototype.Helpers;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Any2Any.Prototype.Migrations
{
    [DbContext(typeof(Any2AnyDbContext))]
    partial class Any2AnyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.12");

            modelBuilder.Entity("Any2Any.Prototype.Model.Entity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Entities");
                });

            modelBuilder.Entity("Any2Any.Prototype.Model.EntityProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("DataType")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("EntityProperties");
                });

            modelBuilder.Entity("Any2Any.Prototype.Model.Record", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("Any2Any.Prototype.Model.RecordGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RecordGroups");
                });

            modelBuilder.Entity("Any2Any.Prototype.Model.RecordGroupLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RecordGroupId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RecordGroupId");

                    b.HasIndex("RecordId");

                    b.ToTable("RecordGroupLinks");
                });

            modelBuilder.Entity("Any2Any.Prototype.Model.RecordLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Record1Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Record2Id")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Record1Id");

                    b.HasIndex("Record2Id");

                    b.ToTable("RecordLinks");
                });

            modelBuilder.Entity("Any2Any.Prototype.Model.Value", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DataType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlainTextData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("RecordId");

                    b.ToTable("Values");
                });

            modelBuilder.Entity("Any2Any.Prototype.Model.EntityProperty", b =>
                {
                    b.HasOne("Any2Any.Prototype.Model.Entity", "Entity")
                        .WithMany("Properties")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Any2Any.Prototype.Model.Record", b =>
                {
                    b.HasOne("Any2Any.Prototype.Model.Entity", "Entity")
                        .WithMany("Records")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Any2Any.Prototype.Model.RecordGroupLink", b =>
                {
                    b.HasOne("Any2Any.Prototype.Model.RecordGroup", "RecordGroup")
                        .WithMany("RecordGroupLinks")
                        .HasForeignKey("RecordGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Any2Any.Prototype.Model.Record", "Record")
                        .WithMany()
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Record");

                    b.Navigation("RecordGroup");
                });

            modelBuilder.Entity("Any2Any.Prototype.Model.RecordLink", b =>
                {
                    b.HasOne("Any2Any.Prototype.Model.Record", "Record1")
                        .WithMany()
                        .HasForeignKey("Record1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Any2Any.Prototype.Model.Record", "Record2")
                        .WithMany()
                        .HasForeignKey("Record2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Record1");

                    b.Navigation("Record2");
                });

            modelBuilder.Entity("Any2Any.Prototype.Model.Value", b =>
                {
                    b.HasOne("Any2Any.Prototype.Model.EntityProperty", "EntityProperty")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Any2Any.Prototype.Model.Record", "Record")
                        .WithMany("Values")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityProperty");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("Any2Any.Prototype.Model.Entity", b =>
                {
                    b.Navigation("Properties");

                    b.Navigation("Records");
                });

            modelBuilder.Entity("Any2Any.Prototype.Model.Record", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("Any2Any.Prototype.Model.RecordGroup", b =>
                {
                    b.Navigation("RecordGroupLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
